def dr_check(debug, release):
    return """if (CMAKE_BUILD_TYPE EQUAL "DEBUG")\n    {}\nelse()\n    {}\nendif()\n""".format(debug, release)

class Cmake():
    def __init__(self, name):
        self.name = '_'.join(name.split())
        self.targets = []
        self.debug_flags = []
        self.debug_defines = {}
        self.release_flags = []
        self.release_defines = {}

    def add_debug_define(self, key, value):
        self.debug_defines[key] = value

    def add_release_define(self, key, value):
        self.release_defines[key] = value

    def add_debug_flags(self, flags):
        if isinstance(flags, (list,)):
            for flag in flags:
                self.debug_flags.append(flag)
        else:
            self.debug_flags.append(flags)

    def add_release_flags(self, flags):
        if isinstance(flags, (list,)):
            for flag in flags:
                self.debug_flags.append(flag)
        else:
            self.debug_flags.append(flags)

    def add_target(self, name):
        self.targets.append(Target(name))
        return self.targets[-1]

    def __str__(self):
        cmakelines = ["""#autogenerated by ACRONYM
#changes should be done through the utility to avoid overwrites

cmake_minimum_required(VERSION 3.9.0)
project({0})

#default to release
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING "" FORCE)
endif()

#clear defaults
set(CMAKE_C_FLAGS_DEBUG "")
set(CMAKE_C_FLAGS_RELEASE "")

#set some standards
set(CMAKE_C_STANDARD 11)
add_definitions(-D_POSIX_C_SOURCE=200809L -D_DEFAULT_SOURCE)

#ensure IPO and LTO is avalible
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_LINK_WHAT_YOU_USE ON)
include(CheckIPOSupported)
check_ipo_supported(RESULT ipo_supported OUTPUT error)
if(ipo_supported)
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE ON)
else()
    message(STATUS "IPO / LTO not supported: <${{error}}>")
endif()

#update/pull git submodules
find_package(Git QUIET)
if(GIT_FOUND AND EXISTS "${{PROJECT_SOURCE_DIR}}/.git")
# Update submodules as needed
    option(GIT_SUBMODULE "Check submodules during build" ON)
    if(GIT_SUBMODULE)
        message(STATUS "Submodule update")
        execute_process(COMMAND ${{GIT_EXECUTABLE}} submodule update --init --recursive
                        WORKING_DIRECTORY ${{CMAKE_CURRENT_SOURCE_DIR}}
                        RESULT_VARIABLE GIT_SUBMOD_RESULT)
        if(NOT GIT_SUBMOD_RESULT EQUAL "0")
            message(FATAL_ERROR "git submodule update --init failed with ${{GIT_SUBMOD_RESULT}}, please checkout submodules")
        endif()
    endif()
endif()
""".format(self.name)]

        if self.debug_defines:
            targetlines.append("set(DEBUG_DEFINES {})".format(' '.join("{}={}".format(k,v) for k,v in self.debug_defines.items())))

        if self.release_defines:
            targetlines.append("set(RELEASE_DEFINES {})".format(' '.join("\"-D{}={}\"".format(k,v) for k,v in self.release_defines.items())))

        cmakelines.append(dr_check("add_definitions(${DEBUG_DEFINES})",
                                    "add_definitions(${RELEASE_DEFINES})"))

        for target in self.targets:
            cmakelines.append("")
            cmakelines.append(str(target))

        cmakelines.append("")
        return '\n'.join(cmakelines)


class Target():
    def __init__(self, name, strip=True):
        self.name = '_'.join(name.split())
        #TODO add the post build strip dependancy
        self.strip = strip
        self.files = []
        self.libraries= []
        self.includes = []
        self.debug_flags = []
        self.debug_defines = {}
        self.release_flags = []
        self.release_defines = {}

    def add_debug_define(self, key, value):
        self.debug_defines[key] = value

    def add_release_define(self, key, value):
        self.release_defines[key] = value

    def add_debug_flags(self, flags):
        if isinstance(flags, (list,)):
            for flag in flags:
                self.debug_flags.append(flag)
        else:
            self.debug_flags.append(flags)

    def add_release_flags(self, flags):
        if isinstance(flags, (list,)):
            for flag in flags:
                self.debug_flags.append(flag)
        else:
            self.debug_flags.append(flags)

    def add_library(self, library):
        self.libraries.append(library)

    def add_file(self, file):
        self.files.append(file)

    def add_include(self, include):
        self.includes.append(include)

    def __str__(self):
        targetlines = ["#{} specific configuration".format(self.name)]

        if self.files:
            targetlines.append("#no files in target, skipped")
            return "\n".join(targetlines)

        targetlines.append("set({}_SOURCES\n    {})".format(self.name, '    \n'.join("\"{}\"".format(file) for file in self.files)))

        targetlines.append("add_executable({0} ${{{0}_SOURCES}})".format(self.name))

        if self.debug_flags:
            targetlines.append("set({}_DEBUG {})".format(self.name, ' '.join(debug for debug in self.debug_flags)))

        if self.release_flags:
            targetlines.append("set({}_RELEASE {})".format(self.name, ' '.join(release for release in self.release_flags)))

        if self.debug_defines:
            targetlines.append("set({}_DEBUG_DEFINES {})".format(self.name, ' '.join("\"-D{}={}\"".format(k,v) for k,v in self.debug_defines.items())))

        if self.release_defines:
            targetlines.append("set({}_RELEASE_DEFINES {})".format(self.name, ' '.join("\"-D{}={}\"".format(k,v) for k,v in self.release_defines.items())))

        if self.includes:
            targetlines.append("target_include_directories({} PUBLIC {})".format(self.name, ' '.join(include for include in self.includes)))

        if self.libraries:
            targetlines.append("target_link_libraries({} PRIVATE {})".format(self.name, ' '.join(library for library in self.libraries)))

        targetlines.append(dr_check("target_compile_options({0} PRIVATE ${{{0}_DEBUG}})".format(self.name),
                                    "target_compile_options({0} PRIVATE ${{{0}_RELEASE}})".format(self.name)))

        targetlines.append(dr_check("target_compile_definitions({0} PRIVATE ${{{0}_DEBUG_DEFINES}})".format(self.name),
                                    "target_compile_definitions({0} PRIVATE ${{{0}_RELEASE_DEFINES}})".format(self.name)))

        return "\n".join(targetlines)
